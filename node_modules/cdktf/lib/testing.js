"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Testing = void 0;
const constructs_1 = require("constructs");
const fs = require("fs");
const path = require("path");
const os = require("os");
const lib_1 = require("../lib");
const features_1 = require("./features");
/**
 * (experimental) Testing utilities for cdktf applications.
 *
 * @experimental
 */
class Testing {
    /**
     * (experimental) Returns an app for testing with the following properties: - Output directory is a temp dir.
     *
     * @experimental
     */
    static app() {
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdktf.outdir.'));
        const app = new lib_1.App({ outdir, stackTraces: false });
        return this.stubVersion(this.enableFutureFlags(app));
    }
    /**
     * @experimental
     */
    static stubVersion(app) {
        constructs_1.Node.of(app).setContext('cdktfVersion', 'stubbed');
        return app;
    }
    /**
     * @experimental
     */
    static enableFutureFlags(app) {
        const node = constructs_1.Node.of(app);
        Object.entries(features_1.FUTURE_FLAGS).forEach(([key, value]) => node.setContext(key, value));
        return app;
    }
    /**
     * (experimental) Returns the Terraform synthesized JSON.
     *
     * @experimental
     */
    static synth(stack) {
        return JSON.stringify(stack.toTerraform(), null, 2);
    }
    /* istanbul ignore next */
    constructor() {
        return;
    }
}
exports.Testing = Testing;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3RpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkNBQWlDO0FBQ2pDLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUFDOUIseUJBQTBCO0FBQzFCLGdDQUE2QjtBQUU3Qix5Q0FBMEM7Ozs7OztBQUsxQyxNQUFhLE9BQU87Ozs7OztJQUtULE1BQU0sQ0FBQyxHQUFHO1FBQ2IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7O0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFRO1FBQzlCLGlCQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUE7UUFDbEQsT0FBTyxHQUFHLENBQUE7SUFDZCxDQUFDOzs7O0lBRU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQVE7UUFDcEMsTUFBTSxJQUFJLEdBQUcsaUJBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyx1QkFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDcEYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFLTSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQXFCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFFRCwwQkFBMEI7SUFDMUI7UUFDSSxPQUFPO0lBQ1gsQ0FBQztDQUNKO0FBakNELDBCQWlDQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ2NvbnN0cnVjdHMnXG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcycpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgb3MgPSByZXF1aXJlKCdvcycpO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IFRlcnJhZm9ybVN0YWNrIH0gZnJvbSAnLi90ZXJyYWZvcm0tc3RhY2snO1xuaW1wb3J0IHsgRlVUVVJFX0ZMQUdTIH0gZnJvbSAnLi9mZWF0dXJlcyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBjbGFzcyBUZXN0aW5nIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBwdWJsaWMgc3RhdGljIGFwcCgpOiBBcHAge1xuICAgICAgICBjb25zdCBvdXRkaXIgPSBmcy5ta2R0ZW1wU3luYyhwYXRoLmpvaW4ob3MudG1wZGlyKCksICdjZGt0Zi5vdXRkaXIuJykpO1xuICAgICAgICBjb25zdCBhcHAgPSBuZXcgQXBwKHsgb3V0ZGlyLCBzdGFja1RyYWNlczogZmFsc2UgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0dWJWZXJzaW9uKHRoaXMuZW5hYmxlRnV0dXJlRmxhZ3MoYXBwKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzdHViVmVyc2lvbihhcHA6IEFwcCk6IEFwcCB7XG4gICAgICAgIE5vZGUub2YoYXBwKS5zZXRDb250ZXh0KCdjZGt0ZlZlcnNpb24nLCAnc3R1YmJlZCcpXG4gICAgICAgIHJldHVybiBhcHBcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGVuYWJsZUZ1dHVyZUZsYWdzKGFwcDogQXBwKTogQXBwIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IE5vZGUub2YoYXBwKTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoRlVUVVJFX0ZMQUdTKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IG5vZGUuc2V0Q29udGV4dChrZXksIHZhbHVlKSk7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIHB1YmxpYyBzdGF0aWMgc3ludGgoc3RhY2s6IFRlcnJhZm9ybVN0YWNrKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGFjay50b1RlcnJhZm9ybSgpLCBudWxsLCAyKVxuICAgIH1cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn0iXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.CONTEXT_ENV = void 0;
const constructs_1 = require("constructs");
const fs = require("fs");
const package_json_1 = require("../package.json");
exports.CONTEXT_ENV = 'CDKTF_CONTEXT_JSON';
/**
 * (experimental) Represents a cdktf application.
 *
 * @experimental
 */
class App extends constructs_1.Construct {
    /**
     * (experimental) Defines an app.
     *
     * @param options configuration options.
     * @experimental
     */
    constructor(options = {}) {
        var _a, _b;
        super(undefined, '');
        this.outdir = (_b = (_a = process.env.CDKTF_OUTDIR) !== null && _a !== void 0 ? _a : options.outdir) !== null && _b !== void 0 ? _b : 'cdktf.out';
        this.loadContext(options.context);
        const node = constructs_1.Node.of(this);
        if (options.stackTraces === false) {
            node.setContext(constructs_1.ConstructMetadata.DISABLE_STACK_TRACE_IN_METADATA, true);
        }
        node.setContext('cdktfVersion', package_json_1.version);
    }
    /**
     * (experimental) Synthesizes all resources to the output directory.
     *
     * @experimental
     */
    synth() {
        if (!fs.existsSync(this.outdir)) {
            fs.mkdirSync(this.outdir);
        }
        constructs_1.Node.of(this).synthesize({
            outdir: this.outdir
        });
    }
    loadContext(defaults = {}) {
        const node = constructs_1.Node.of(this);
        // prime with defaults passed through constructor
        for (const [k, v] of Object.entries(defaults)) {
            node.setContext(k, v);
        }
        // read from environment
        const contextJson = process.env[exports.CONTEXT_ENV];
        const contextFromEnvironment = contextJson
            ? JSON.parse(contextJson)
            : {};
        for (const [k, v] of Object.entries(contextFromEnvironment)) {
            node.setContext(k, v);
        }
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUFnRTtBQUNoRSx5QkFBeUI7QUFDekIsa0RBQTBDO0FBRTdCLFFBQUEsV0FBVyxHQUFHLG9CQUFvQixDQUFDOzs7Ozs7QUEwQmhELE1BQWEsR0FBSSxTQUFRLHNCQUFTOzs7Ozs7O0lBVTlCLFlBQVksVUFBc0IsRUFBRTs7UUFDaEMsS0FBSyxDQUFDLFNBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sZUFBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksbUNBQUksT0FBTyxDQUFDLE1BQU0sbUNBQUksV0FBVyxDQUFDO1FBRXhFLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWxDLE1BQU0sSUFBSSxHQUFHLGlCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzFCLElBQUksT0FBTyxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyw4QkFBaUIsQ0FBQywrQkFBK0IsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM1RTtRQUVELElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLHNCQUFPLENBQUMsQ0FBQTtJQUM1QyxDQUFDOzs7Ozs7SUFLTSxLQUFLO1FBQ1IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdCO1FBRUQsaUJBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDO1lBQ3JCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUN0QixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sV0FBVyxDQUFDLFdBQXNDLEVBQUc7UUFDekQsTUFBTSxJQUFJLEdBQUcsaUJBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFMUIsaURBQWlEO1FBQ2pELEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZCO1FBRUQsd0JBQXdCO1FBQ3hCLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQVcsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sc0JBQXNCLEdBQUcsV0FBVztZQUN4QyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDekIsQ0FBQyxDQUFDLEVBQUcsQ0FBQztRQUVSLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLEVBQUU7WUFDM0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdkI7SUFDSCxDQUFDO0NBQ047QUF2REQsa0JBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0LCBOb2RlLCBDb25zdHJ1Y3RNZXRhZGF0YSB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XG5cbmV4cG9ydCBjb25zdCBDT05URVhUX0VOViA9ICdDREtURl9DT05URVhUX0pTT04nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFwcE9wdGlvbnMge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIHJlYWRvbmx5IG91dGRpcj86IHN0cmluZztcbiAgICByZWFkb25seSBzdGFja1RyYWNlcz86IGJvb2xlYW47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICByZWFkb25seSBjb250ZXh0PzogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgQXBwIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBwdWJsaWMgcmVhZG9ubHkgb3V0ZGlyOiBzdHJpbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEFwcE9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQgYXMgYW55LCAnJyk7XG4gICAgICAgIHRoaXMub3V0ZGlyID0gcHJvY2Vzcy5lbnYuQ0RLVEZfT1VURElSID8/IG9wdGlvbnMub3V0ZGlyID8/ICdjZGt0Zi5vdXQnO1xuXG4gICAgICAgIHRoaXMubG9hZENvbnRleHQob3B0aW9ucy5jb250ZXh0KTtcblxuICAgICAgICBjb25zdCBub2RlID0gTm9kZS5vZih0aGlzKVxuICAgICAgICBpZiAob3B0aW9ucy5zdGFja1RyYWNlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG5vZGUuc2V0Q29udGV4dChDb25zdHJ1Y3RNZXRhZGF0YS5ESVNBQkxFX1NUQUNLX1RSQUNFX0lOX01FVEFEQVRBLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUuc2V0Q29udGV4dCgnY2RrdGZWZXJzaW9uJywgdmVyc2lvbilcbiAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIHB1YmxpYyBzeW50aCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKHRoaXMub3V0ZGlyKSkge1xuICAgICAgICAgICAgZnMubWtkaXJTeW5jKHRoaXMub3V0ZGlyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE5vZGUub2YodGhpcykuc3ludGhlc2l6ZSh7XG4gICAgICAgICAgICBvdXRkaXI6IHRoaXMub3V0ZGlyXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZENvbnRleHQoZGVmYXVsdHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7IH0pIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IE5vZGUub2YodGhpcylcblxuICAgICAgICAvLyBwcmltZSB3aXRoIGRlZmF1bHRzIHBhc3NlZCB0aHJvdWdoIGNvbnN0cnVjdG9yXG4gICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGRlZmF1bHRzKSkge1xuICAgICAgICAgIG5vZGUuc2V0Q29udGV4dChrLCB2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlYWQgZnJvbSBlbnZpcm9ubWVudFxuICAgICAgICBjb25zdCBjb250ZXh0SnNvbiA9IHByb2Nlc3MuZW52W0NPTlRFWFRfRU5WXTtcbiAgICAgICAgY29uc3QgY29udGV4dEZyb21FbnZpcm9ubWVudCA9IGNvbnRleHRKc29uXG4gICAgICAgICAgPyBKU09OLnBhcnNlKGNvbnRleHRKc29uKVxuICAgICAgICAgIDogeyB9O1xuICAgIFxuICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhjb250ZXh0RnJvbUVudmlyb25tZW50KSkge1xuICAgICAgICAgIG5vZGUuc2V0Q29udGV4dChrLCB2KTtcbiAgICAgICAgfVxuICAgICAgfVxufSJdfQ==
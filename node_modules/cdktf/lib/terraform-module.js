"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformModule = void 0;
const terraform_element_1 = require("./terraform-element");
const terraform_provider_1 = require("./terraform-provider");
const util_1 = require("./util");
const tokens_1 = require("./tokens");
/**
 * @experimental
 */
class TerraformModule extends terraform_element_1.TerraformElement {
    /**
     * @experimental
     */
    constructor(scope, id, options) {
        super(scope, id);
        this.source = options.source;
        this.version = options.version;
        this._providers = options.providers;
        if (Array.isArray(options.dependsOn)) {
            this.dependsOn = options.dependsOn.map(dependency => dependency.fqn);
        }
    }
    // jsii can't handle abstract classes?
    /**
     * @experimental
     */
    synthesizeAttributes() {
        return {};
    }
    /**
     * @experimental
     */
    interpolationForOutput(moduleOutput) {
        return `\${module.${this.friendlyUniqueId}.${moduleOutput}}`;
    }
    /**
     * @experimental
     */
    get fqn() {
        return tokens_1.Token.asString(`module.${this.friendlyUniqueId}`);
    }
    /**
     * @experimental
     */
    get providers() {
        return this._providers;
    }
    /**
     * @experimental
     */
    addProvider(provider) {
        if (!this._providers) {
            this._providers = [];
        }
        this._providers.push(provider);
    }
    /**
     * @experimental
     */
    toTerraform() {
        var _a;
        const attributes = util_1.deepMerge({
            ...this.synthesizeAttributes(),
            source: this.source,
            version: this.version,
            providers: (_a = this.providers) === null || _a === void 0 ? void 0 : _a.map(p => {
                if (p instanceof terraform_provider_1.TerraformProvider) {
                    return { [p.terraformResourceType]: p.fqn };
                }
                else {
                    return { [`${p.provider.terraformResourceType}.${p.moduleAlias}`]: p.provider.fqn };
                }
            }),
            dependsOn: this.dependsOn,
        }, this.rawOverrides);
        attributes['//'] = this.constructNodeMetadata;
        return {
            module: {
                [this.friendlyUniqueId]: attributes
            }
        };
    }
}
exports.TerraformModule = TerraformModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLW1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlcnJhZm9ybS1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkRBQXVEO0FBQ3ZELDZEQUF5RDtBQUN6RCxpQ0FBbUM7QUFFbkMscUNBQWlDOzs7O0FBY2pDLE1BQXNCLGVBQWdCLFNBQVEsb0NBQWdCOzs7O0lBTzVELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsT0FBK0I7UUFDdkUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNwQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdEU7SUFDSCxDQUFDO0lBRUQsc0NBQXNDOzs7O0lBQzVCLG9CQUFvQjtRQUM1QixPQUFPLEVBQUUsQ0FBQTtJQUNYLENBQUM7Ozs7SUFFTSxzQkFBc0IsQ0FBQyxZQUFvQjtRQUNoRCxPQUFPLGFBQWEsSUFBSSxDQUFDLGdCQUFnQixJQUFJLFlBQVksR0FBVSxDQUFDO0lBQ3RFLENBQUM7Ozs7SUFFRCxJQUFXLEdBQUc7UUFDWixPQUFPLGNBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7SUFFRCxJQUFXLFNBQVM7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFTSxXQUFXLENBQUMsUUFBcUQ7UUFDcEUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7U0FDeEI7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRVEsV0FBVzs7UUFDaEIsTUFBTSxVQUFVLEdBQUcsZ0JBQVMsQ0FBQztZQUMzQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUM5QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLFNBQVMsUUFBRSxJQUFJLENBQUMsU0FBUywwQ0FBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxZQUFZLHNDQUFpQixFQUFFO29CQUNoQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7aUJBQy9DO3FCQUNJO29CQUNELE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO2lCQUN2RjtZQUNILENBQUMsQ0FBQztZQUNGLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztTQUMxQixFQUNDLElBQUksQ0FBQyxZQUFZLENBQ2xCLENBQUE7UUFFRCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFBO1FBRTdDLE9BQU87WUFDTCxNQUFNLEVBQUU7Z0JBQ04sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxVQUFVO2FBQ3BDO1NBQ0YsQ0FBQTtJQUNILENBQUM7Q0FDRjtBQXBFRCwwQ0FvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtRWxlbWVudCB9IGZyb20gXCIuL3RlcnJhZm9ybS1lbGVtZW50XCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1Qcm92aWRlciB9IGZyb20gXCIuL3RlcnJhZm9ybS1wcm92aWRlclwiO1xuaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHsgSVRlcnJhZm9ybURlcGVuZGFibGUgfSBmcm9tIFwiLi90ZXJyYWZvcm0tZGVwZW5kYWJsZVwiO1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tIFwiLi90b2tlbnNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBUZXJyYWZvcm1Nb2R1bGVPcHRpb25zIHtcbiAgcmVhZG9ubHkgc291cmNlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHZlcnNpb24/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByb3ZpZGVycz86IChUZXJyYWZvcm1Qcm92aWRlciB8IFRlcnJhZm9ybU1vZHVsZVByb3ZpZGVyKVtdO1xuICByZWFkb25seSBkZXBlbmRzT24/OiBJVGVycmFmb3JtRGVwZW5kYWJsZVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlcnJhZm9ybU1vZHVsZVByb3ZpZGVyIHtcbiAgcmVhZG9ubHkgcHJvdmlkZXI6IFRlcnJhZm9ybVByb3ZpZGVyO1xuICByZWFkb25seSBtb2R1bGVBbGlhczogc3RyaW5nO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGVycmFmb3JtTW9kdWxlIGV4dGVuZHMgVGVycmFmb3JtRWxlbWVudCBpbXBsZW1lbnRzIElUZXJyYWZvcm1EZXBlbmRhYmxlIHtcblxuICBwdWJsaWMgcmVhZG9ubHkgc291cmNlOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSB2ZXJzaW9uPzogc3RyaW5nO1xuICBwcml2YXRlIF9wcm92aWRlcnM/OiAoVGVycmFmb3JtUHJvdmlkZXIgfCBUZXJyYWZvcm1Nb2R1bGVQcm92aWRlcilbXTtcbiAgcHVibGljIGRlcGVuZHNPbj86IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIG9wdGlvbnM6IFRlcnJhZm9ybU1vZHVsZU9wdGlvbnMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgdGhpcy5zb3VyY2UgPSBvcHRpb25zLnNvdXJjZTtcbiAgICB0aGlzLnZlcnNpb24gPSBvcHRpb25zLnZlcnNpb247XG4gICAgdGhpcy5fcHJvdmlkZXJzID0gb3B0aW9ucy5wcm92aWRlcnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5kZXBlbmRzT24pKSB7XG4gICAgICB0aGlzLmRlcGVuZHNPbiA9IG9wdGlvbnMuZGVwZW5kc09uLm1hcChkZXBlbmRlbmN5ID0+IGRlcGVuZGVuY3kuZnFuKTtcbiAgICB9XG4gIH1cblxuICAvLyBqc2lpIGNhbid0IGhhbmRsZSBhYnN0cmFjdCBjbGFzc2VzP1xuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiB7fVxuICB9XG5cbiAgcHVibGljIGludGVycG9sYXRpb25Gb3JPdXRwdXQobW9kdWxlT3V0cHV0OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYFxcJHttb2R1bGUuJHt0aGlzLmZyaWVuZGx5VW5pcXVlSWR9LiR7bW9kdWxlT3V0cHV0fX1gIGFzIGFueTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZnFuKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFRva2VuLmFzU3RyaW5nKGBtb2R1bGUuJHt0aGlzLmZyaWVuZGx5VW5pcXVlSWR9YCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHByb3ZpZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXJzO1xufVxuXG5wdWJsaWMgYWRkUHJvdmlkZXIocHJvdmlkZXI6IFRlcnJhZm9ybVByb3ZpZGVyIHwgVGVycmFmb3JtTW9kdWxlUHJvdmlkZXIpIHtcbiAgICBpZiAoIXRoaXMuX3Byb3ZpZGVycykge1xuICAgICAgICB0aGlzLl9wcm92aWRlcnMgPSBbXTtcbiAgICB9XG4gICAgdGhpcy5fcHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpO1xufVxuXG4gIHB1YmxpYyB0b1RlcnJhZm9ybSgpOiBhbnkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBkZWVwTWVyZ2Uoe1xuICAgICAgLi4udGhpcy5zeW50aGVzaXplQXR0cmlidXRlcygpLFxuICAgICAgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbixcbiAgICAgIHByb3ZpZGVyczogdGhpcy5wcm92aWRlcnM/Lm1hcChwID0+IHtcbiAgICAgICAgaWYgKHAgaW5zdGFuY2VvZiBUZXJyYWZvcm1Qcm92aWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgW3AudGVycmFmb3JtUmVzb3VyY2VUeXBlXTogcC5mcW4gfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IFtgJHtwLnByb3ZpZGVyLnRlcnJhZm9ybVJlc291cmNlVHlwZX0uJHtwLm1vZHVsZUFsaWFzfWBdOiBwLnByb3ZpZGVyLmZxbiB9O1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGRlcGVuZHNPbjogdGhpcy5kZXBlbmRzT24sXG4gICAgfSxcbiAgICAgIHRoaXMucmF3T3ZlcnJpZGVzXG4gICAgKVxuXG4gICAgYXR0cmlidXRlc1snLy8nXSA9IHRoaXMuY29uc3RydWN0Tm9kZU1ldGFkYXRhXG5cbiAgICByZXR1cm4ge1xuICAgICAgbW9kdWxlOiB7XG4gICAgICAgIFt0aGlzLmZyaWVuZGx5VW5pcXVlSWRdOiBhdHRyaWJ1dGVzXG4gICAgICB9XG4gICAgfVxuICB9XG59Il19
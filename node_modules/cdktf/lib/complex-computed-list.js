"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComplexComputedList = exports.BooleanMap = exports.NumberMap = exports.StringMap = void 0;
const tokens_1 = require("./tokens");
class ComplexComputedAttribute {
    constructor(terraformResource, terraformAttribute) {
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    /**
     * @experimental
     */
    getStringAttribute(terraformAttribute) {
        return tokens_1.Token.asString(this.interpolationForAttribute(terraformAttribute));
    }
    /**
     * @experimental
     */
    getNumberAttribute(terraformAttribute) {
        return tokens_1.Token.asNumber(this.interpolationForAttribute(terraformAttribute));
    }
    /**
     * @experimental
     */
    getListAttribute(terraformAttribute) {
        return tokens_1.Token.asList(this.interpolationForAttribute(terraformAttribute));
    }
    /**
     * @experimental
     */
    getBooleanAttribute(terraformAttribute) {
        return tokens_1.Token.asString(this.interpolationForAttribute(terraformAttribute));
    }
}
/**
 * @experimental
 */
class StringMap {
    /**
     * @experimental
     */
    constructor(terraformResource, terraformAttribute) {
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    /**
     * @experimental
     */
    lookup(key) {
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}["${key}"]`));
    }
}
exports.StringMap = StringMap;
/**
 * @experimental
 */
class NumberMap {
    /**
     * @experimental
     */
    constructor(terraformResource, terraformAttribute) {
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    /**
     * @experimental
     */
    lookup(key) {
        return tokens_1.Token.asNumber(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}["${key}"]`));
    }
}
exports.NumberMap = NumberMap;
/**
 * @experimental
 */
class BooleanMap {
    /**
     * @experimental
     */
    constructor(terraformResource, terraformAttribute) {
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    /**
     * @experimental
     */
    lookup(key) {
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}["${key}"]`));
    }
}
exports.BooleanMap = BooleanMap;
/**
 * @experimental
 */
class ComplexComputedList extends ComplexComputedAttribute {
    /**
     * @experimental
     */
    constructor(terraformResource, terraformAttribute, index) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.index = index;
    }
    /**
     * @experimental
     */
    interpolationForAttribute(property) {
        return this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}.${this.index}.${property}`);
    }
}
exports.ComplexComputedList = ComplexComputedList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxleC1jb21wdXRlZC1saXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tcGxleC1jb21wdXRlZC1saXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFnQztBQUdoQyxNQUFlLHdCQUF3QjtJQUNyQyxZQUFzQixpQkFBcUMsRUFBWSxrQkFBMEI7UUFBM0Usc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFvQjtRQUFZLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBUTtJQUFHLENBQUM7Ozs7SUFFOUYsa0JBQWtCLENBQUMsa0JBQTBCO1FBQ2xELE9BQU8sY0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxrQkFBMEI7UUFDbEQsT0FBTyxjQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQzs7OztJQUVNLGdCQUFnQixDQUFDLGtCQUEwQjtRQUNoRCxPQUFPLGNBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDOzs7O0lBRU0sbUJBQW1CLENBQUMsa0JBQTBCO1FBQ25ELE9BQU8sY0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsa0JBQWtCLENBQUMsQ0FBbUIsQ0FBQTtJQUM3RixDQUFDO0NBR0Y7Ozs7QUFFRCxNQUFhLFNBQVM7Ozs7SUFDcEIsWUFBc0IsaUJBQXFDLEVBQVksa0JBQTBCO1FBQTNFLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBb0I7UUFBWSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVE7SUFBRyxDQUFDOzs7O0lBRTlGLE1BQU0sQ0FBQyxHQUFXO1FBQ3ZCLE9BQU8sY0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ2pILENBQUM7Q0FDRjtBQU5ELDhCQU1DOzs7O0FBRUQsTUFBYSxTQUFTOzs7O0lBQ3BCLFlBQXNCLGlCQUFxQyxFQUFZLGtCQUEwQjtRQUEzRSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW9CO1FBQVksdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFRO0lBQUcsQ0FBQzs7OztJQUU5RixNQUFNLENBQUMsR0FBVztRQUN2QixPQUFPLGNBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUNqSCxDQUFDO0NBQ0Y7QUFORCw4QkFNQzs7OztBQUVELE1BQWEsVUFBVTs7OztJQUNyQixZQUFzQixpQkFBcUMsRUFBWSxrQkFBMEI7UUFBM0Usc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFvQjtRQUFZLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBUTtJQUFHLENBQUM7Ozs7SUFFOUYsTUFBTSxDQUFDLEdBQVc7UUFDdkIsT0FBTyxjQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFtQixDQUFBO0lBQ25JLENBQUM7Q0FDRjtBQU5ELGdDQU1DOzs7O0FBRUQsTUFBYSxtQkFBb0IsU0FBUSx3QkFBd0I7Ozs7SUFDL0QsWUFBc0IsaUJBQXFDLEVBQVksa0JBQTBCLEVBQVksS0FBYTtRQUN4SCxLQUFLLENBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtRQUR4QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW9CO1FBQVksdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFRO1FBQVksVUFBSyxHQUFMLEtBQUssQ0FBUTtJQUUxSCxDQUFDOzs7O0lBRVMseUJBQXlCLENBQUMsUUFBZ0I7UUFDbEQsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2xILENBQUM7Q0FDRjtBQVJELGtEQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9rZW4gfSBmcm9tIFwiLi90b2tlbnNcIlxuaW1wb3J0IHsgSVRlcnJhZm9ybVJlc291cmNlIH0gZnJvbSBcIi4vdGVycmFmb3JtLXJlc291cmNlXCI7XG5cbmFic3RyYWN0IGNsYXNzIENvbXBsZXhDb21wdXRlZEF0dHJpYnV0ZSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0ZXJyYWZvcm1SZXNvdXJjZTogSVRlcnJhZm9ybVJlc291cmNlLCBwcm90ZWN0ZWQgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHt9XG5cbiAgcHVibGljIGdldFN0cmluZ0F0dHJpYnV0ZSh0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHJldHVybiBUb2tlbi5hc1N0cmluZyh0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUodGVycmFmb3JtQXR0cmlidXRlKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TnVtYmVyQXR0cmlidXRlKHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIFRva2VuLmFzTnVtYmVyKHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSh0ZXJyYWZvcm1BdHRyaWJ1dGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMaXN0QXR0cmlidXRlKHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIFRva2VuLmFzTGlzdCh0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUodGVycmFmb3JtQXR0cmlidXRlKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Qm9vbGVhbkF0dHJpYnV0ZSh0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHJldHVybiBUb2tlbi5hc1N0cmluZyh0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUodGVycmFmb3JtQXR0cmlidXRlKSkgYXMgYW55IGFzIGJvb2xlYW5cbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBpbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKTogc3RyaW5nXG59XG5cbmV4cG9ydCBjbGFzcyBTdHJpbmdNYXAge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdGVycmFmb3JtUmVzb3VyY2U6IElUZXJyYWZvcm1SZXNvdXJjZSwgcHJvdGVjdGVkIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7fVxuXG4gIHB1YmxpYyBsb29rdXAoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBUb2tlbi5hc1N0cmluZyh0aGlzLnRlcnJhZm9ybVJlc291cmNlLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUoYCR7dGhpcy50ZXJyYWZvcm1BdHRyaWJ1dGV9W1wiJHtrZXl9XCJdYCkpXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE51bWJlck1hcCB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0ZXJyYWZvcm1SZXNvdXJjZTogSVRlcnJhZm9ybVJlc291cmNlLCBwcm90ZWN0ZWQgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHt9XG5cbiAgcHVibGljIGxvb2t1cChrZXk6IHN0cmluZyk6IG51bWJlciB7XG4gICAgcmV0dXJuIFRva2VuLmFzTnVtYmVyKHRoaXMudGVycmFmb3JtUmVzb3VyY2UuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZShgJHt0aGlzLnRlcnJhZm9ybUF0dHJpYnV0ZX1bXCIke2tleX1cIl1gKSlcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQm9vbGVhbk1hcCB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0ZXJyYWZvcm1SZXNvdXJjZTogSVRlcnJhZm9ybVJlc291cmNlLCBwcm90ZWN0ZWQgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHt9XG5cbiAgcHVibGljIGxvb2t1cChrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBUb2tlbi5hc1N0cmluZyh0aGlzLnRlcnJhZm9ybVJlc291cmNlLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUoYCR7dGhpcy50ZXJyYWZvcm1BdHRyaWJ1dGV9W1wiJHtrZXl9XCJdYCkpIGFzIGFueSBhcyBib29sZWFuXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbXBsZXhDb21wdXRlZExpc3QgZXh0ZW5kcyBDb21wbGV4Q29tcHV0ZWRBdHRyaWJ1dGUge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdGVycmFmb3JtUmVzb3VyY2U6IElUZXJyYWZvcm1SZXNvdXJjZSwgcHJvdGVjdGVkIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nLCBwcm90ZWN0ZWQgaW5kZXg6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUpXG4gIH1cblxuICBwcm90ZWN0ZWQgaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZShwcm9wZXJ0eTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMudGVycmFmb3JtUmVzb3VyY2UuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZShgJHt0aGlzLnRlcnJhZm9ybUF0dHJpYnV0ZX0uJHt0aGlzLmluZGV4fS4ke3Byb3BlcnR5fWApO1xuICB9XG59XG4iXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformLocal = void 0;
const terraform_element_1 = require("./terraform-element");
const tokens_1 = require("./tokens");
/**
 * @experimental
 */
class TerraformLocal extends terraform_element_1.TerraformElement {
    /**
     * @experimental
     */
    constructor(scope, id, expression) {
        super(scope, id);
        this._expression = expression;
    }
    /**
     * @experimental
     */
    set expression(value) {
        this._expression = value;
    }
    /**
     * @experimental
     */
    get expression() {
        return tokens_1.Token.asAny(this.interpolation());
    }
    /**
     * @experimental
     */
    get asString() {
        return tokens_1.Token.asString(this.interpolation());
    }
    /**
     * @experimental
     */
    get asNumber() {
        return tokens_1.Token.asNumber(this.interpolation());
    }
    /**
     * @experimental
     */
    get asList() {
        return tokens_1.Token.asList(this.interpolation());
    }
    /**
     * @experimental
     */
    get asBoolean() {
        return tokens_1.Token.asString(this.interpolation());
    }
    interpolation() {
        return `\${local.${this.friendlyUniqueId}}`;
    }
    /**
     * @experimental
     */
    toTerraform() {
        return {
            locals: {
                [this.friendlyUniqueId]: this._expression
            }
        };
    }
}
exports.TerraformLocal = TerraformLocal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLWxvY2FsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVycmFmb3JtLWxvY2FsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDJEQUF1RDtBQUN2RCxxQ0FBaUM7Ozs7QUFFakMsTUFBYSxjQUFlLFNBQVEsb0NBQWdCOzs7O0lBR2hELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsVUFBZTtRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO0lBQ2xDLENBQUM7Ozs7SUFFRCxJQUFXLFVBQVUsQ0FBQyxLQUFVO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxJQUFXLFVBQVU7UUFDakIsT0FBTyxjQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7SUFFRCxJQUFXLFFBQVE7UUFDZixPQUFPLGNBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7OztJQUVELElBQVcsUUFBUTtRQUNmLE9BQU8sY0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsSUFBVyxNQUFNO1FBQ2IsT0FBTyxjQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFRCxJQUFXLFNBQVM7UUFDaEIsT0FBTyxjQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBbUIsQ0FBQTtJQUNqRSxDQUFDO0lBRU8sYUFBYTtRQUNqQixPQUFPLFlBQVksSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUE7SUFDL0MsQ0FBQzs7OztJQUVNLFdBQVc7UUFDZCxPQUFPO1lBQ0gsTUFBTSxFQUFFO2dCQUNKLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVc7YUFDNUM7U0FDSixDQUFDO0lBQ04sQ0FBQztDQUNKO0FBNUNELHdDQTRDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1FbGVtZW50IH0gZnJvbSBcIi4vdGVycmFmb3JtLWVsZW1lbnRcIjtcbmltcG9ydCB7IFRva2VuIH0gZnJvbSBcIi4vdG9rZW5zXCI7XG5cbmV4cG9ydCBjbGFzcyBUZXJyYWZvcm1Mb2NhbCBleHRlbmRzIFRlcnJhZm9ybUVsZW1lbnQge1xuICAgIHByaXZhdGUgX2V4cHJlc3Npb246IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGV4cHJlc3Npb246IGFueSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIHRoaXMuX2V4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgZXhwcmVzc2lvbih2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuX2V4cHJlc3Npb24gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGV4cHJlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiBUb2tlbi5hc0FueSh0aGlzLmludGVycG9sYXRpb24oKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBhc1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gVG9rZW4uYXNTdHJpbmcodGhpcy5pbnRlcnBvbGF0aW9uKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYXNOdW1iZXIoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIFRva2VuLmFzTnVtYmVyKHRoaXMuaW50ZXJwb2xhdGlvbigpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGFzTGlzdCgpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiBUb2tlbi5hc0xpc3QodGhpcy5pbnRlcnBvbGF0aW9uKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYXNCb29sZWFuKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gVG9rZW4uYXNTdHJpbmcodGhpcy5pbnRlcnBvbGF0aW9uKCkpIGFzIGFueSBhcyBib29sZWFuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnRlcnBvbGF0aW9uKCk6IGFueSB7XG4gICAgICAgIHJldHVybiBgXFwke2xvY2FsLiR7dGhpcy5mcmllbmRseVVuaXF1ZUlkfX1gXG4gICAgfVxuXG4gICAgcHVibGljIHRvVGVycmFmb3JtKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2NhbHM6IHtcbiAgICAgICAgICAgICAgICBbdGhpcy5mcmllbmRseVVuaXF1ZUlkXTogdGhpcy5fZXhwcmVzc2lvblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn0iXX0=
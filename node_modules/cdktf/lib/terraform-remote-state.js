"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformRemoteState = void 0;
const terraform_element_1 = require("./terraform-element");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
/**
 * @experimental
 */
class TerraformRemoteState extends terraform_element_1.TerraformElement {
    /**
     * @experimental
     */
    constructor(scope, id, backend, config) {
        super(scope, id);
        this.backend = backend;
        this.config = config;
    }
    /**
     * @experimental
     */
    getString(output) {
        return tokens_1.Token.asString(this.interpolationForAttribute(output));
    }
    /**
     * @experimental
     */
    getNumber(output) {
        return tokens_1.Token.asNumber(this.interpolationForAttribute(output));
    }
    /**
     * @experimental
     */
    getList(output) {
        return tokens_1.Token.asList(this.interpolationForAttribute(output));
    }
    /**
     * @experimental
     */
    getBoolean(output) {
        return tokens_1.Token.asString(this.interpolationForAttribute(output));
    }
    /**
     * @experimental
     */
    get(output) {
        return tokens_1.Token.asAny(this.interpolationForAttribute(output));
    }
    interpolationForAttribute(terraformAttribute) {
        return `\${data.terraform_remote_state.${this.friendlyUniqueId}.outputs.${terraformAttribute}}`;
    }
    extractConfig() {
        const configObj = util_1.keysToSnakeCase({ ...this.config });
        delete configObj.workspace;
        delete configObj.defaults;
        return configObj;
    }
    /**
     * (experimental) Adds this resource to the terraform JSON output.
     *
     * @experimental
     */
    toTerraform() {
        return {
            data: {
                // eslint-disable-next-line @typescript-eslint/camelcase
                terraform_remote_state: {
                    [this.friendlyUniqueId]: util_1.deepMerge({
                        backend: this.backend,
                        workspace: this.config.workspace,
                        defaults: this.config.defaults,
                        config: this.extractConfig()
                    }, this.rawOverrides)
                }
            }
        };
    }
}
exports.TerraformRemoteState = TerraformRemoteState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLXJlbW90ZS1zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlcnJhZm9ybS1yZW1vdGUtc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkRBQXVEO0FBQ3ZELHFDQUFpQztBQUNqQyxpQ0FBb0Q7Ozs7QUFPcEQsTUFBc0Isb0JBQXFCLFNBQVEsb0NBQWdCOzs7O0lBQy9ELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQW1CLE9BQWUsRUFBbUIsTUFBc0M7UUFDL0gsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQURzQyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQW1CLFdBQU0sR0FBTixNQUFNLENBQWdDO0lBRW5JLENBQUM7Ozs7SUFFTSxTQUFTLENBQUMsTUFBYztRQUMzQixPQUFPLGNBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7OztJQUVNLFNBQVMsQ0FBQyxNQUFjO1FBQzNCLE9BQU8sY0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs7O0lBRU0sT0FBTyxDQUFDLE1BQWM7UUFDekIsT0FBTyxjQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7SUFFTSxVQUFVLENBQUMsTUFBYztRQUM1QixPQUFPLGNBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFtQixDQUFBO0lBQ25GLENBQUM7Ozs7SUFFTSxHQUFHLENBQUMsTUFBYztRQUNyQixPQUFPLGNBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVPLHlCQUF5QixDQUFDLGtCQUEwQjtRQUN4RCxPQUFPLGtDQUFrQyxJQUFJLENBQUMsZ0JBQWdCLFlBQVksa0JBQWtCLEdBQUcsQ0FBQTtJQUNuRyxDQUFDO0lBRU8sYUFBYTtRQUNqQixNQUFNLFNBQVMsR0FBRyxzQkFBZSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN0RCxPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFDM0IsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBQzFCLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7Ozs7OztJQUtNLFdBQVc7UUFDZCxPQUFPO1lBQ0gsSUFBSSxFQUFFO2dCQUNGLHdEQUF3RDtnQkFDeEQsc0JBQXNCLEVBQUU7b0JBQ3BCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsZ0JBQVMsQ0FBQzt3QkFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO3dCQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTO3dCQUNoQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO3dCQUM5QixNQUFNLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRTtxQkFDL0IsRUFDRyxJQUFJLENBQUMsWUFBWSxDQUFDO2lCQUN6QjthQUNKO1NBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSjtBQXZERCxvREF1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtRWxlbWVudCB9IGZyb20gXCIuL3RlcnJhZm9ybS1lbGVtZW50XCI7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gXCIuL3Rva2Vuc1wiO1xuaW1wb3J0IHsgZGVlcE1lcmdlLCBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnIHtcbiAgICByZWFkb25seSB3b3Jrc3BhY2U/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZGVmYXVsdHM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGVycmFmb3JtUmVtb3RlU3RhdGUgZXh0ZW5kcyBUZXJyYWZvcm1FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcml2YXRlIHJlYWRvbmx5IGJhY2tlbmQ6IHN0cmluZywgcHJpdmF0ZSByZWFkb25seSBjb25maWc6IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTdHJpbmcob3V0cHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gVG9rZW4uYXNTdHJpbmcodGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKG91dHB1dCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXROdW1iZXIob3V0cHV0OiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gVG9rZW4uYXNOdW1iZXIodGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKG91dHB1dCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRMaXN0KG91dHB1dDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gVG9rZW4uYXNMaXN0KHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZShvdXRwdXQpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Qm9vbGVhbihvdXRwdXQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gVG9rZW4uYXNTdHJpbmcodGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKG91dHB1dCkpIGFzIGFueSBhcyBib29sZWFuXG4gICAgfVxuXG4gICAgcHVibGljIGdldChvdXRwdXQ6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIHJldHVybiBUb2tlbi5hc0FueSh0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUob3V0cHV0KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKTogYW55IHtcbiAgICAgICAgcmV0dXJuIGBcXCR7ZGF0YS50ZXJyYWZvcm1fcmVtb3RlX3N0YXRlLiR7dGhpcy5mcmllbmRseVVuaXF1ZUlkfS5vdXRwdXRzLiR7dGVycmFmb3JtQXR0cmlidXRlfX1gXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBleHRyYWN0Q29uZmlnKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICAgICAgY29uc3QgY29uZmlnT2JqID0ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5jb25maWcgfSk7XG4gICAgICAgIGRlbGV0ZSBjb25maWdPYmoud29ya3NwYWNlO1xuICAgICAgICBkZWxldGUgY29uZmlnT2JqLmRlZmF1bHRzO1xuICAgICAgICByZXR1cm4gY29uZmlnT2JqO1xuICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBwdWJsaWMgdG9UZXJyYWZvcm0oKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NhbWVsY2FzZVxuICAgICAgICAgICAgICAgIHRlcnJhZm9ybV9yZW1vdGVfc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgW3RoaXMuZnJpZW5kbHlVbmlxdWVJZF06IGRlZXBNZXJnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZW5kOiB0aGlzLmJhY2tlbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3Jrc3BhY2U6IHRoaXMuY29uZmlnLndvcmtzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB0aGlzLmNvbmZpZy5kZWZhdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogdGhpcy5leHRyYWN0Q29uZmlnKClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmF3T3ZlcnJpZGVzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59Il19
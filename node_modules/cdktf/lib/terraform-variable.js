"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformVariable = exports.VariableType = void 0;
const terraform_element_1 = require("./terraform-element");
const util_1 = require("./util");
const tokens_1 = require("./tokens");
/**
 * @experimental
 */
class VariableType {
    /**
     * @experimental
     */
    static list(type) {
        return `list(${type})`;
    }
    /**
     * @experimental
     */
    static map(type) {
        return `map(${type})`;
    }
    /**
     * @experimental
     */
    static set(type) {
        return `set(${type})`;
    }
    /**
     * @experimental
     */
    static tuple(...elements) {
        return `tuple(${elements.join(", ")})`;
    }
    /**
     * @experimental
     */
    static object(attributes) {
        return `object({${Object.keys(attributes).map(k => k + "=" + attributes[k]).join(", ")}})`;
    }
}
exports.VariableType = VariableType;
/**
 * @experimental
 */
VariableType.STRING = 'string';
/**
 * @experimental
 */
VariableType.NUMBER = 'number';
/**
 * @experimental
 */
VariableType.BOOL = 'bool';
/**
 * @experimental
 */
VariableType.ANY = 'any';
/**
 * @experimental
 */
VariableType.LIST = 'list';
/**
 * @experimental
 */
VariableType.MAP = 'map';
/**
 * @experimental
 */
VariableType.SET = 'set';
/**
 * @experimental
 */
VariableType.LIST_STRING = 'list(string)';
/**
 * @experimental
 */
VariableType.LIST_NUMBER = 'list(number)';
/**
 * @experimental
 */
VariableType.LIST_BOOL = 'list(bool)';
/**
 * @experimental
 */
VariableType.MAP_STRING = 'map(string)';
/**
 * @experimental
 */
VariableType.MAP_NUMBER = 'map(number)';
/**
 * @experimental
 */
VariableType.MAP_BOOL = 'map(bool)';
/**
 * @experimental
 */
VariableType.SET_STRING = 'set(string)';
/**
 * @experimental
 */
VariableType.SET_NUMBER = 'set(number)';
/**
 * @experimental
 */
VariableType.SET_BOOL = 'set(bool)';
/**
 * @experimental
 */
class TerraformVariable extends terraform_element_1.TerraformElement {
    /**
     * @experimental
     */
    constructor(scope, id, config) {
        super(scope, id);
        this.default = config.default;
        this.description = config.description;
        this.type = config.type;
    }
    /**
     * @experimental
     */
    get stringValue() {
        return tokens_1.Token.asString(this.interpolation());
    }
    /**
     * @experimental
     */
    get numberValue() {
        return tokens_1.Token.asNumber(this.interpolation());
    }
    /**
     * @experimental
     */
    get listValue() {
        return tokens_1.Token.asList(this.interpolation());
    }
    /**
     * @experimental
     */
    get booleanValue() {
        return tokens_1.Token.asString(this.interpolation());
    }
    /**
     * @experimental
     */
    get value() {
        return tokens_1.Token.asAny(this.interpolation());
    }
    interpolation() {
        return `\${var.${this.friendlyUniqueId}}`;
    }
    /**
     * @experimental
     */
    synthesizeAttributes() {
        return {
            default: this.default,
            description: this.description,
            type: this.type
        };
    }
    /**
     * @experimental
     */
    toTerraform() {
        return {
            variable: {
                [this.friendlyUniqueId]: util_1.deepMerge(util_1.keysToSnakeCase(this.synthesizeAttributes()), this.rawOverrides)
            }
        };
    }
}
exports.TerraformVariable = TerraformVariable;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformHclModule = void 0;
const terraform_module_1 = require("./terraform-module");
/**
 * @experimental
 */
class TerraformHclModule extends terraform_module_1.TerraformModule {
    /**
     * @experimental
     */
    constructor(scope, id, options) {
        super(scope, id, options);
        this._variables = options.variables;
    }
    /**
     * @experimental
     */
    get variables() {
        return this._variables;
    }
    /**
     * @experimental
     */
    set(variable, value) {
        if (!this._variables) {
            this._variables = {};
        }
        this._variables[variable] = value;
    }
    /**
     * @experimental
     */
    get(output) {
        return this.interpolationForOutput(output);
    }
    /**
     * @experimental
     */
    getString(output) {
        return this.get(output);
    }
    /**
     * @experimental
     */
    getNumber(output) {
        return this.get(output);
    }
    /**
     * @experimental
     */
    getBoolean(output) {
        return this.get(output);
    }
    /**
     * @experimental
     */
    getList(output) {
        return this.get(output);
    }
    /**
     * @experimental
     */
    synthesizeAttributes() {
        return { ...this.variables };
    }
}
exports.TerraformHclModule = TerraformHclModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLWhjbC1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXJyYWZvcm0taGNsLW1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx5REFBNkU7Ozs7QUFNN0UsTUFBYSxrQkFBbUIsU0FBUSxrQ0FBZTs7OztJQUduRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLE9BQWtDO1FBQ3hFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTFCLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUN4QyxDQUFDOzs7O0lBRUQsSUFBVyxTQUFTO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDOzs7O0lBRU0sR0FBRyxDQUFDLFFBQWdCLEVBQUUsS0FBVTtRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztTQUN4QjtRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFTSxHQUFHLENBQUMsTUFBYztRQUNyQixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRU0sU0FBUyxDQUFDLE1BQWM7UUFDM0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFTSxTQUFTLENBQUMsTUFBYztRQUMzQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVNLFVBQVUsQ0FBQyxNQUFjO1FBQzVCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7O0lBRU0sT0FBTyxDQUFDLE1BQWM7UUFDekIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFUyxvQkFBb0I7UUFDMUIsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLENBQUM7Q0FDSjtBQTNDRCxnREEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtTW9kdWxlT3B0aW9ucywgVGVycmFmb3JtTW9kdWxlIH0gZnJvbSBcIi4vdGVycmFmb3JtLW1vZHVsZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRlcnJhZm9ybUhjbE1vZHVsZU9wdGlvbnMgZXh0ZW5kcyBUZXJyYWZvcm1Nb2R1bGVPcHRpb25zIHtcbiAgICByZWFkb25seSB2YXJpYWJsZXM/OiB7W2tleTogc3RyaW5nXTogYW55fTtcbn1cblxuZXhwb3J0IGNsYXNzIFRlcnJhZm9ybUhjbE1vZHVsZSBleHRlbmRzIFRlcnJhZm9ybU1vZHVsZSB7XG4gICAgcHJpdmF0ZSBfdmFyaWFibGVzPzoge1trZXk6IHN0cmluZ106IGFueX07XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBvcHRpb25zOiBUZXJyYWZvcm1IY2xNb2R1bGVPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fdmFyaWFibGVzID0gb3B0aW9ucy52YXJpYWJsZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB2YXJpYWJsZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YXJpYWJsZXM7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCh2YXJpYWJsZTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgICAgIGlmICghdGhpcy5fdmFyaWFibGVzKSB7XG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92YXJpYWJsZXNbdmFyaWFibGVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldChvdXRwdXQ6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVycG9sYXRpb25Gb3JPdXRwdXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3RyaW5nKG91dHB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE51bWJlcihvdXRwdXQ6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChvdXRwdXQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRCb29sZWFuKG91dHB1dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChvdXRwdXQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRMaXN0KG91dHB1dDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgICAgICByZXR1cm4geyAuLi50aGlzLnZhcmlhYmxlcyB9O1xuICAgIH1cbn0iXX0=